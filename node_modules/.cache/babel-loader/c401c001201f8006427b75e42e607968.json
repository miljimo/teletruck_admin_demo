{"remainingRequest":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/babel-loader/lib/index.js!/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/src/views/TodoComponents/TodoTask.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/src/views/TodoComponents/TodoTask.vue","mtime":1600553567000},{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/cache-loader/dist/cjs.js","mtime":1596790124748},{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/babel-loader/lib/index.js","mtime":1596739166622},{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/cache-loader/dist/cjs.js","mtime":1596790124748},{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/vue-loader/lib/index.js","mtime":1596739192596}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    taskId: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      taskLocal: this.$store.getters[\"todo/getTask\"](this.taskId)\n    };\n  },\n  computed: {\n    isCompleted: {\n      get: function get() {\n        return this.taskLocal.isCompleted;\n      },\n      set: function set(value) {\n        var _this = this;\n\n        this.$store.dispatch(\"todo/updateTask\", Object.assign({}, this.taskLocal, {\n          isCompleted: value\n        })).then(function (response) {\n          _this.taskLocal.isCompleted = response.data.isCompleted;\n        }).catch(function (error) {\n          console.error(error);\n        });\n      }\n    },\n    todoLabelColor: function todoLabelColor() {\n      var _this2 = this;\n\n      return function (label) {\n        var tags = _this2.$store.state.todo.taskTags;\n        return tags.find(function (tag) {\n          return tag.value === label;\n        }).color;\n      };\n    }\n  },\n  methods: {\n    toggleIsImportant: function toggleIsImportant() {\n      var _this3 = this;\n\n      this.$store.dispatch(\"todo/updateTask\", Object.assign({}, this.taskLocal, {\n        isImportant: !this.taskLocal.isImportant\n      })).then(function (response) {\n        _this3.taskLocal.isImportant = response.data.isImportant;\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    toggleIsStarred: function toggleIsStarred() {\n      var _this4 = this;\n\n      this.$store.dispatch(\"todo/updateTask\", Object.assign({}, this.taskLocal, {\n        isStarred: !this.taskLocal.isStarred\n      })).then(function (response) {\n        _this4.taskLocal.isStarred = response.data.isStarred;\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    moveToTrash: function moveToTrash() {\n      var _this5 = this;\n\n      this.$store.dispatch(\"todo/updateTask\", Object.assign({}, this.taskLocal, {\n        isTrashed: true\n      })).then(function (response) {\n        // console.log(response.data);\n        _this5.taskLocal.isTrashed = response.data.isTrashed;\n        _this5.$el.style.display = \"none\"; // Hides element from DOM\n      }).catch(function (error) {\n        console.error(error);\n      }); // Un-comment below line if you want to fetch task after task is deleted\n      // this.$store.dispatch(\"todo/fetchTasks\", {filter: this.$route.params.filter})\n    },\n    displayPrompt: function displayPrompt() {\n      this.$emit(\"showDisplayPrompt\", this.taskId);\n    }\n  }\n};",{"version":3,"sources":["TodoTask.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- =========================================================================================\n    File Name: TodoItem.vue\n    Description: Single todo item component\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n\n<template>\n  <div @click=\"displayPrompt\" class=\"px-4 py-4 list-item-component\">\n    <div class=\"vx-row\">\n      <div class=\"vx-col w-full sm:w-5/6 flex sm:items-center sm:flex-row flex-col\">\n        <div class=\"flex items-center\">\n          <vs-checkbox v-model=\"isCompleted\" class=\"w-8 m-0 vs-checkbox-small\" @click.stop />\n          <h6\n            class=\"todo-title\"\n            :class=\"{'line-through': taskLocal.isCompleted}\"\n          >{{ taskLocal.title }}</h6>\n        </div>\n        <div class=\"todo-tags sm:ml-2 sm:my-0 my-2 flex\">\n          <vs-chip v-for=\"(tag, index) in taskLocal.tags\" :key=\"index\">\n            <div class=\"h-2 w-2 rounded-full mr-1\" :class=\"'bg-' + todoLabelColor(tag)\"></div>\n            <span>{{ tag | capitalize }}</span>\n          </vs-chip>\n        </div>\n      </div>\n\n      <div class=\"vx-col w-full sm:w-1/6 ml-auto flex sm:justify-end\">\n        <feather-icon\n          icon=\"InfoIcon\"\n          class=\"cursor-pointer\"\n          :svgClasses=\"[{'text-success stroke-current': taskLocal.isImportant}, 'w-5', 'h-5 mr-4']\"\n          @click.stop=\"toggleIsImportant\"\n        />\n\n        <feather-icon\n          icon=\"StarIcon\"\n          class=\"cursor-pointer\"\n          :svgClasses=\"[{'text-warning stroke-current': taskLocal.isStarred}, 'w-5', 'h-5 mr-4']\"\n          @click.stop=\"toggleIsStarred\"\n        />\n        <feather-icon\n          v-if=\"!taskLocal.isTrashed\"\n          icon=\"TrashIcon\"\n          class=\"cursor-pointer\"\n          svgClasses=\"w-5 h-5\"\n          @click.stop=\"moveToTrash\"\n        />\n      </div>\n    </div>\n    <div class=\"vx-row\" v-if=\"taskLocal.desc\">\n      <div class=\"vx-col w-full\">\n        <p\n          class=\"mt-2 truncate\"\n          :class=\"{'line-through': taskLocal.isCompleted}\"\n        >{{ taskLocal.desc }}</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    taskId: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      taskLocal: this.$store.getters[\"todo/getTask\"](this.taskId)\n    };\n  },\n  computed: {\n    isCompleted: {\n      get() {\n        return this.taskLocal.isCompleted;\n      },\n      set(value) {\n        this.$store\n          .dispatch(\n            \"todo/updateTask\",\n            Object.assign({}, this.taskLocal, { isCompleted: value })\n          )\n          .then(response => {\n            this.taskLocal.isCompleted = response.data.isCompleted;\n          })\n          .catch(error => {\n            console.error(error);\n          });\n      }\n    },\n    todoLabelColor() {\n      return label => {\n        const tags = this.$store.state.todo.taskTags;\n        return tags.find(tag => {\n          return tag.value === label;\n        }).color;\n      };\n    }\n  },\n  methods: {\n    toggleIsImportant() {\n      this.$store\n        .dispatch(\n          \"todo/updateTask\",\n          Object.assign({}, this.taskLocal, {\n            isImportant: !this.taskLocal.isImportant\n          })\n        )\n        .then(response => {\n          this.taskLocal.isImportant = response.data.isImportant;\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    toggleIsStarred() {\n      this.$store\n        .dispatch(\n          \"todo/updateTask\",\n          Object.assign({}, this.taskLocal, {\n            isStarred: !this.taskLocal.isStarred\n          })\n        )\n        .then(response => {\n          this.taskLocal.isStarred = response.data.isStarred;\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    moveToTrash() {\n      this.$store\n        .dispatch(\n          \"todo/updateTask\",\n          Object.assign({}, this.taskLocal, { isTrashed: true })\n        )\n        .then(response => {\n          // console.log(response.data);\n          this.taskLocal.isTrashed = response.data.isTrashed;\n          this.$el.style.display = \"none\"; // Hides element from DOM\n        })\n        .catch(error => {\n          console.error(error);\n        });\n\n      // Un-comment below line if you want to fetch task after task is deleted\n      // this.$store.dispatch(\"todo/fetchTasks\", {filter: this.$route.params.filter})\n    },\n    displayPrompt() {\n      this.$emit(\"showDisplayPrompt\", this.taskId);\n    }\n  }\n};\n</script>\n"],"sourceRoot":"src/views/TodoComponents"}]}