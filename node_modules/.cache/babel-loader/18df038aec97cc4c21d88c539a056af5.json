{"remainingRequest":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/babel-loader/lib/index.js!/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/src/views/Todo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/src/views/Todo.vue","mtime":1600553567000},{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/cache-loader/dist/cjs.js","mtime":1596790124748},{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/babel-loader/lib/index.js","mtime":1596739166622},{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/cache-loader/dist/cjs.js","mtime":1596790124748},{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Baby Diary Admin/node_modules/vue-loader/lib/index.js","mtime":1596739192596}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.filter\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moduleTodo from \"@/store/todo/moduleTodo.js\";\nimport TodoAddNew from \"./TodoComponents/TodoAddNew.vue\";\nimport TodoTask from \"./TodoComponents/TodoTask.vue\";\nimport TodoFilters from \"./TodoComponents/TodoFilters.vue\";\nimport TodoEdit from \"./TodoComponents/TodoEdit.vue\";\nimport VuePerfectScrollbar from \"vue-perfect-scrollbar\";\nexport default {\n  data: function data() {\n    return {\n      currFilter: \"\",\n      clickNotClose: true,\n      displayPrompt: false,\n      taskIdToEdit: 0,\n      isSidebarActive: true,\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.3\n      }\n    };\n  },\n  watch: {\n    todoFilter: function todoFilter() {\n      var scroll_el = this.$refs.taskListPS.$el || this.$refs.taskListPS;\n      scroll_el.scrollTop = 0;\n      this.toggleTodoSidebar(); // Fetch Tasks\n\n      var filter = this.$route.params.filter;\n      this.$store.dispatch(\"todo/fetchTasks\", {\n        filter: filter\n      });\n      this.$store.commit(\"todo/UPDATE_TODO_FILTER\", filter);\n    },\n    windowWidth: function windowWidth() {\n      this.setSidebarWidth();\n    }\n  },\n  computed: {\n    todo: function todo() {\n      return this.$store.state.todo.todoArray;\n    },\n    todoFilter: function todoFilter() {\n      return this.$route.params.filter;\n    },\n    taskList: function taskList() {\n      return this.$store.getters[\"todo/queriedTasks\"];\n    },\n    searchQuery: {\n      get: function get() {\n        return this.$store.state.todo.todoSearchQuery;\n      },\n      set: function set(val) {\n        this.$store.dispatch(\"todo/setTodoSearchQuery\", val);\n      }\n    },\n    scrollbarTag: function scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n    windowWidth: function windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  methods: {\n    showDisplayPrompt: function showDisplayPrompt(itemId) {\n      this.taskIdToEdit = itemId;\n      this.displayPrompt = true;\n    },\n    hidePrompt: function hidePrompt() {\n      this.displayPrompt = false;\n    },\n    setSidebarWidth: function setSidebarWidth() {\n      if (this.windowWidth < 992) {\n        this.isSidebarActive = this.clickNotClose = false;\n      } else {\n        this.isSidebarActive = this.clickNotClose = true;\n      }\n    },\n    toggleTodoSidebar: function toggleTodoSidebar() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!value && this.clickNotClose) return;\n      this.isSidebarActive = value;\n    }\n  },\n  components: {\n    TodoAddNew: TodoAddNew,\n    TodoTask: TodoTask,\n    TodoFilters: TodoFilters,\n    TodoEdit: TodoEdit,\n    VuePerfectScrollbar: VuePerfectScrollbar\n  },\n  created: function created() {\n    this.$store.registerModule(\"todo\", moduleTodo);\n    this.setSidebarWidth();\n    var filter = this.$route.params.filter; // Fetch Tasks\n\n    this.$store.dispatch(\"todo/fetchTasks\", {\n      filter: filter\n    });\n    this.$store.commit(\"todo/UPDATE_TODO_FILTER\", filter); // Fetch Tags\n\n    this.$store.dispatch(\"todo/fetchTags\");\n  },\n  beforeUpdate: function beforeUpdate() {\n    this.currFilter = this.$route.params.filter;\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$store.unregisterModule(\"todo\");\n  },\n  mounted: function mounted() {\n    this.$store.dispatch(\"todo/setTodoSearchQuery\", \"\");\n  }\n};",{"version":3,"sources":["Todo.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div\n    id=\"todo-app\"\n    class=\"border border-solid d-theme-border-grey-light rounded relative overflow-hidden\"\n  >\n    <vs-sidebar\n      class=\"items-no-padding\"\n      parent=\"#todo-app\"\n      :click-not-close=\"clickNotClose\"\n      :hidden-background=\"clickNotClose\"\n      v-model=\"isSidebarActive\"\n    >\n      <todo-add-new />\n\n      <component :is=\"scrollbarTag\" class=\"todo-scroll-area\" :settings=\"settings\" :key=\"$vs.rtl\">\n        <todo-filters @closeSidebar=\"toggleTodoSidebar\"></todo-filters>\n      </component>\n    </vs-sidebar>\n    <div\n      :class=\"{'sidebar-spacer': clickNotClose}\"\n      class=\"no-scroll-content border border-r-0 border-b-0 border-t-0 border-solid d-theme-border-grey-light no-scroll-content\"\n    >\n      <div\n        class=\"flex d-theme-dark-bg items-center border border-l-0 border-r-0 border-t-0 border-solid d-theme-border-grey-light\"\n      >\n        <!-- TOGGLE SIDEBAR BUTTON -->\n        <feather-icon\n          class=\"md:inline-flex lg:hidden ml-4 mr-4 cursor-pointer\"\n          icon=\"MenuIcon\"\n          @click.stop=\"toggleTodoSidebar(true)\"\n        />\n\n        <!-- SEARCH BAR -->\n        <vs-input\n          icon-no-border\n          size=\"large\"\n          icon-pack=\"feather\"\n          icon=\"icon-search\"\n          placeholder=\"Search...\"\n          v-model=\"searchQuery\"\n          class=\"vs-input-no-border vs-input-no-shdow-focus w-full\"\n        />\n      </div>\n\n      <!-- TODO LIST -->\n      <component\n        :is=\"scrollbarTag\"\n        class=\"todo-content-scroll-area\"\n        :settings=\"settings\"\n        ref=\"taskListPS\"\n        :key=\"$vs.rtl\"\n      >\n        <transition-group class=\"todo-list\" name=\"list-enter-up\" tag=\"ul\" appear>\n          <li\n            class=\"cursor-pointer todo_todo-item\"\n            v-for=\"(task, index) in taskList\"\n            :key=\"String(currFilter) + String(task.id)\"\n            :style=\"[{transitionDelay: (index * 0.1) + 's'}]\"\n          >\n            <todo-task\n              :taskId=\"task.id\"\n              @showDisplayPrompt=\"showDisplayPrompt($event)\"\n              :key=\"String(task.title) + String(task.desc)\"\n            />\n            <!--\n                        Note: Remove \"todo-task\" component's key just concat lastUpdated field in li key list.\n                        e.g. <li class=\"...\" v-for=\"...\" :key=\"String(currFilter) + String(task.id) + String(task.lastUpdated)\" .. >\n            -->\n          </li>\n        </transition-group>\n      </component>\n      <!-- /TODO LIST -->\n    </div>\n\n    <!-- EDIT TODO DIALOG -->\n    <todo-edit\n      :displayPrompt=\"displayPrompt\"\n      :taskId=\"taskIdToEdit\"\n      @hideDisplayPrompt=\"hidePrompt\"\n      v-if=\"displayPrompt\"\n    ></todo-edit>\n  </div>\n</template>\n\n<script>\nimport moduleTodo from \"@/store/todo/moduleTodo.js\";\nimport TodoAddNew from \"./TodoComponents/TodoAddNew.vue\";\nimport TodoTask from \"./TodoComponents/TodoTask.vue\";\nimport TodoFilters from \"./TodoComponents/TodoFilters.vue\";\nimport TodoEdit from \"./TodoComponents/TodoEdit.vue\";\nimport VuePerfectScrollbar from \"vue-perfect-scrollbar\";\n\nexport default {\n  data() {\n    return {\n      currFilter: \"\",\n      clickNotClose: true,\n      displayPrompt: false,\n      taskIdToEdit: 0,\n      isSidebarActive: true,\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.3\n      }\n    };\n  },\n  watch: {\n    todoFilter() {\n      const scroll_el = this.$refs.taskListPS.$el || this.$refs.taskListPS;\n      scroll_el.scrollTop = 0;\n\n      this.toggleTodoSidebar();\n\n      // Fetch Tasks\n      const filter = this.$route.params.filter;\n      this.$store.dispatch(\"todo/fetchTasks\", { filter });\n      this.$store.commit(\"todo/UPDATE_TODO_FILTER\", filter);\n    },\n    windowWidth() {\n      this.setSidebarWidth();\n    }\n  },\n  computed: {\n    todo() {\n      return this.$store.state.todo.todoArray;\n    },\n    todoFilter() {\n      return this.$route.params.filter;\n    },\n    taskList() {\n      return this.$store.getters[\"todo/queriedTasks\"];\n    },\n    searchQuery: {\n      get() {\n        return this.$store.state.todo.todoSearchQuery;\n      },\n      set(val) {\n        this.$store.dispatch(\"todo/setTodoSearchQuery\", val);\n      }\n    },\n    scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n    windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  methods: {\n    showDisplayPrompt(itemId) {\n      this.taskIdToEdit = itemId;\n      this.displayPrompt = true;\n    },\n    hidePrompt() {\n      this.displayPrompt = false;\n    },\n    setSidebarWidth() {\n      if (this.windowWidth < 992) {\n        this.isSidebarActive = this.clickNotClose = false;\n      } else {\n        this.isSidebarActive = this.clickNotClose = true;\n      }\n    },\n    toggleTodoSidebar(value = false) {\n      if (!value && this.clickNotClose) return;\n      this.isSidebarActive = value;\n    }\n  },\n  components: {\n    TodoAddNew,\n    TodoTask,\n    TodoFilters,\n    TodoEdit,\n    VuePerfectScrollbar\n  },\n  created() {\n    this.$store.registerModule(\"todo\", moduleTodo);\n    this.setSidebarWidth();\n\n    const filter = this.$route.params.filter;\n\n    // Fetch Tasks\n    this.$store.dispatch(\"todo/fetchTasks\", { filter });\n    this.$store.commit(\"todo/UPDATE_TODO_FILTER\", filter);\n\n    // Fetch Tags\n    this.$store.dispatch(\"todo/fetchTags\");\n  },\n  beforeUpdate() {\n    this.currFilter = this.$route.params.filter;\n  },\n  beforeDestroy() {\n    this.$store.unregisterModule(\"todo\");\n  },\n  mounted() {\n    this.$store.dispatch(\"todo/setTodoSearchQuery\", \"\");\n  }\n};\n</script>\n\n\n<style lang=\"scss\">\n@import \"@/assets/scss/vuexy/apps/todo.scss\";\n</style>\n"],"sourceRoot":"src/views"}]}