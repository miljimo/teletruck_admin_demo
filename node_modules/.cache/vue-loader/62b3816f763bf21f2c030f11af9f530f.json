{"remainingRequest":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Teletruck Admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/adeniranopeyemi/Documents/Horpey/Projects/Teletruck Admin/src/layouts/components/navbar/components/NotificationDropDown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Teletruck Admin/src/layouts/components/navbar/components/NotificationDropDown.vue","mtime":1600553567000},{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Teletruck Admin/node_modules/cache-loader/dist/cjs.js","mtime":1596790124748},{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Teletruck Admin/node_modules/babel-loader/lib/index.js","mtime":1596739166622},{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Teletruck Admin/node_modules/cache-loader/dist/cjs.js","mtime":1596790124748},{"path":"/Users/adeniranopeyemi/Documents/Horpey/Projects/Teletruck Admin/node_modules/vue-loader/lib/index.js","mtime":1596739192596}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport VuePerfectScrollbar from \"vue-perfect-scrollbar\";\n\nexport default {\n  components: {\n    VuePerfectScrollbar,\n  },\n  data() {\n    return {\n      unreadNotifications: [],\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.6,\n      },\n    };\n  },\n  computed: {\n    scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n  },\n  mounted() {\n    this.getNotifications();\n  },\n  methods: {\n    getNotifications() {\n      this.$store\n        .dispatch(\"getNotifications\")\n        .then((resp) => {\n          this.unreadNotifications = resp.data.data;\n          console.log(this.unreadNotifications);\n        })\n        .catch((err) => {});\n    },\n    elapsedTime(startTime) {\n      const x = new Date(startTime);\n      const now = new Date();\n      let timeDiff = now - x;\n      timeDiff /= 1000;\n\n      const seconds = Math.round(timeDiff);\n      timeDiff = Math.floor(timeDiff / 60);\n\n      const minutes = Math.round(timeDiff % 60);\n      timeDiff = Math.floor(timeDiff / 60);\n\n      const hours = Math.round(timeDiff % 24);\n      timeDiff = Math.floor(timeDiff / 24);\n\n      const days = Math.round(timeDiff % 365);\n      timeDiff = Math.floor(timeDiff / 365);\n\n      const years = timeDiff;\n\n      if (years > 0) {\n        return `${years + (years > 1 ? \" Years \" : \" Year \")}ago`;\n      } else if (days > 0) {\n        return `${days + (days > 1 ? \" Days \" : \" Day \")}ago`;\n      } else if (hours > 0) {\n        return `${hours + (hours > 1 ? \" Hrs \" : \" Hour \")}ago`;\n      } else if (minutes > 0) {\n        return `${minutes + (minutes > 1 ? \" Mins \" : \" Min \")}ago`;\n      } else if (seconds > 0) {\n        return seconds + (seconds > 1 ? \" sec ago\" : \"just now\");\n      }\n\n      return \"Just Now\";\n    },\n    // Method for creating dummy notification time\n    randomDate({ hr, min, sec }) {\n      const date = new Date();\n\n      if (hr) date.setHours(date.getHours() - hr);\n      if (min) date.setMinutes(date.getMinutes() - min);\n      if (sec) date.setSeconds(date.getSeconds() - sec);\n\n      return date;\n    },\n  },\n};\n",{"version":3,"sources":["NotificationDropDown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"NotificationDropDown.vue","sourceRoot":"src/layouts/components/navbar/components","sourcesContent":["<template>\n  <!-- NOTIFICATIONS -->\n  <vs-dropdown vs-custom-content vs-trigger-click class=\"cursor-pointer\">\n    <feather-icon\n      icon=\"BellIcon\"\n      class=\"cursor-pointer mt-1 sm:mr-6 mr-2\"\n      :badge=\"unreadNotifications.length\"\n    />\n\n    <vs-dropdown-menu class=\"notification-dropdown dropdown-custom vx-navbar-dropdown\">\n      <div class=\"notification-top text-center p-5 bg-primary text-white\">\n        <h3 class=\"text-white\">{{ unreadNotifications.length }} New</h3>\n        <p class=\"opacity-75\">App Notifications</p>\n      </div>\n\n      <component\n        :is=\"scrollbarTag\"\n        ref=\"mainSidebarPs\"\n        class=\"scroll-area--nofications-dropdown p-0 mb-10\"\n        :settings=\"settings\"\n        :key=\"$vs.rtl\"\n      >\n        <ul class=\"bordered-items\">\n          <li\n            v-for=\"(ntf,index) in unreadNotifications\"\n            :key=\"index\"\n            @click=\"$router.push('/notifications')\"\n            v-if=\"index < 5\"\n            class=\"flex justify-between px-4 py-4 notification cursor-pointer\"\n          >\n            <div class=\"flex items-start\">\n              <feather-icon\n                :icon=\"ntf.icon\"\n                :svgClasses=\"[`text-${ntf.category}`, 'stroke-current mr-1 h-6 w-6']\"\n              ></feather-icon>\n              <div class=\"mx-2\">\n                <span\n                  class=\"font-medium block notification-title\"\n                  :class=\"[`text-${ntf.category}`]\"\n                >{{ ntf.title | truncate(35) }}</span>\n                <small>{{ ntf.churchId.email }}</small>\n              </div>\n            </div>\n            <small class=\"mt-1 whitespace-no-wrap\">{{ elapsedTime(ntf.createdAt) }}</small>\n          </li>\n        </ul>\n      </component>\n\n      <div\n        class=\"checkout-footer fixed bottom-0 rounded-b-lg text-primary w-full p-2 font-semibold text-center border border-b-0 border-l-0 border-r-0 border-solid d-theme-border-grey-light cursor-pointer\"\n        @click=\"$router.push('/notifications')\"\n      >\n        <span>View All Notifications</span>\n      </div>\n    </vs-dropdown-menu>\n  </vs-dropdown>\n</template>\n\n<script>\nimport VuePerfectScrollbar from \"vue-perfect-scrollbar\";\n\nexport default {\n  components: {\n    VuePerfectScrollbar,\n  },\n  data() {\n    return {\n      unreadNotifications: [],\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.6,\n      },\n    };\n  },\n  computed: {\n    scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n  },\n  mounted() {\n    this.getNotifications();\n  },\n  methods: {\n    getNotifications() {\n      this.$store\n        .dispatch(\"getNotifications\")\n        .then((resp) => {\n          this.unreadNotifications = resp.data.data;\n          console.log(this.unreadNotifications);\n        })\n        .catch((err) => {});\n    },\n    elapsedTime(startTime) {\n      const x = new Date(startTime);\n      const now = new Date();\n      let timeDiff = now - x;\n      timeDiff /= 1000;\n\n      const seconds = Math.round(timeDiff);\n      timeDiff = Math.floor(timeDiff / 60);\n\n      const minutes = Math.round(timeDiff % 60);\n      timeDiff = Math.floor(timeDiff / 60);\n\n      const hours = Math.round(timeDiff % 24);\n      timeDiff = Math.floor(timeDiff / 24);\n\n      const days = Math.round(timeDiff % 365);\n      timeDiff = Math.floor(timeDiff / 365);\n\n      const years = timeDiff;\n\n      if (years > 0) {\n        return `${years + (years > 1 ? \" Years \" : \" Year \")}ago`;\n      } else if (days > 0) {\n        return `${days + (days > 1 ? \" Days \" : \" Day \")}ago`;\n      } else if (hours > 0) {\n        return `${hours + (hours > 1 ? \" Hrs \" : \" Hour \")}ago`;\n      } else if (minutes > 0) {\n        return `${minutes + (minutes > 1 ? \" Mins \" : \" Min \")}ago`;\n      } else if (seconds > 0) {\n        return seconds + (seconds > 1 ? \" sec ago\" : \"just now\");\n      }\n\n      return \"Just Now\";\n    },\n    // Method for creating dummy notification time\n    randomDate({ hr, min, sec }) {\n      const date = new Date();\n\n      if (hr) date.setHours(date.getHours() - hr);\n      if (min) date.setMinutes(date.getMinutes() - min);\n      if (sec) date.setSeconds(date.getSeconds() - sec);\n\n      return date;\n    },\n  },\n};\n</script>\n\n"]}]}