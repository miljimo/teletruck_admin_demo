/*!
 * devextreme-vue
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import * as VueType from "vue";
import Accordion, { IOptions } from "devextreme/ui/accordion";
declare type AccessibleOptions = Pick<IOptions, "accessKey" | "activeStateEnabled" | "animationDuration" | "collapsible" | "dataSource" | "deferRendering" | "disabled" | "elementAttr" | "focusStateEnabled" | "height" | "hint" | "hoverStateEnabled" | "itemHoldTimeout" | "items" | "itemTemplate" | "itemTitleTemplate" | "keyExpr" | "multiple" | "noDataText" | "onContentReady" | "onDisposing" | "onInitialized" | "onItemClick" | "onItemContextMenu" | "onItemHold" | "onItemRendered" | "onItemTitleClick" | "onOptionChanged" | "onSelectionChanged" | "repaintChangesOnly" | "rtlEnabled" | "selectedIndex" | "selectedItem" | "selectedItemKeys" | "selectedItems" | "tabIndex" | "visible" | "width">;
interface DxAccordion extends AccessibleOptions {
    readonly instance?: Accordion;
}
declare const DxAccordion: VueType.VueConstructor<{
    instance: Accordion;
} & {
    accessKey: string;
    activeStateEnabled: boolean;
    animationDuration: number;
    collapsible: boolean;
    dataSource: any;
    deferRendering: boolean;
    disabled: boolean;
    elementAttr: any;
    focusStateEnabled: boolean;
    height: string | number | Function;
    hint: string;
    hoverStateEnabled: boolean;
    itemHoldTimeout: number;
    items: unknown[];
    itemTemplate: unknown;
    itemTitleTemplate: unknown;
    keyExpr: TimerHandler;
    multiple: boolean;
    noDataText: string;
    onContentReady: Function;
    onDisposing: Function;
    onInitialized: Function;
    onItemClick: TimerHandler;
    onItemContextMenu: Function;
    onItemHold: Function;
    onItemRendered: Function;
    onItemTitleClick: TimerHandler;
    onOptionChanged: Function;
    onSelectionChanged: Function;
    repaintChangesOnly: boolean;
    rtlEnabled: boolean;
    selectedIndex: number;
    selectedItem: any;
    selectedItemKeys: unknown[];
    selectedItems: unknown[];
    tabIndex: number;
    visible: boolean;
    width: string | number | Function;
} & VueType.default>;
declare const DxItem: any;
export default DxAccordion;
export { DxAccordion, DxItem };
