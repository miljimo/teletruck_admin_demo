/*!
 * devextreme-vue
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VueType = require("vue");
var Vue = VueType.default || VueType;
var file_manager_1 = require("devextreme/ui/file_manager");
var component_1 = require("./core/component");
var configuration_component_1 = require("./core/configuration-component");
var DxFileManager = Vue.extend({
    extends: component_1.DxComponent,
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        allowedFileExtensions: Array,
        contextMenu: Object,
        currentPath: String,
        currentPathKeys: Array,
        customizeDetailColumns: Function,
        customizeThumbnail: Function,
        disabled: Boolean,
        elementAttr: Object,
        fileSystemProvider: Object,
        focusedItemKey: String,
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        itemView: Object,
        onContentReady: Function,
        onContextMenuItemClick: Function,
        onCurrentDirectoryChanged: Function,
        onDisposing: Function,
        onErrorOccurred: Function,
        onFocusedItemChanged: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onSelectedFileOpened: Function,
        onSelectionChanged: Function,
        onToolbarItemClick: Function,
        permissions: Object,
        rootFolderName: String,
        rtlEnabled: Boolean,
        selectedItemKeys: Array,
        selectionMode: String,
        tabIndex: Number,
        toolbar: Object,
        upload: Object,
        visible: Boolean,
        width: [Function, Number, String]
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = file_manager_1.default;
        this.$_expectedChildren = {
            contextMenu: { isCollectionItem: false, optionName: "contextMenu" },
            itemView: { isCollectionItem: false, optionName: "itemView" },
            permissions: { isCollectionItem: false, optionName: "permissions" },
            toolbar: { isCollectionItem: false, optionName: "toolbar" },
            upload: { isCollectionItem: false, optionName: "upload" }
        };
    }
});
exports.DxFileManager = DxFileManager;
var DxColumn = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        alignment: String,
        caption: String,
        cssClass: String,
        dataField: String,
        dataType: String,
        hidingPriority: Number,
        sortIndex: Number,
        sortOrder: String,
        visible: Boolean,
        visibleIndex: Number,
        width: [Number, String]
    }
});
exports.DxColumn = DxColumn;
DxColumn.$_optionName = "columns";
DxColumn.$_isCollectionItem = true;
var DxContextMenu = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        items: Array
    }
});
exports.DxContextMenu = DxContextMenu;
DxContextMenu.$_optionName = "contextMenu";
DxContextMenu.$_expectedChildren = {
    contextMenuItem: { isCollectionItem: true, optionName: "items" },
    item: { isCollectionItem: true, optionName: "items" }
};
var DxContextMenuItem = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        beginGroup: Boolean,
        closeMenuOnClick: Boolean,
        disabled: Boolean,
        html: String,
        icon: String,
        items: Array,
        name: String,
        selectable: Boolean,
        selected: Boolean,
        template: {},
        text: String,
        visible: Boolean
    }
});
exports.DxContextMenuItem = DxContextMenuItem;
DxContextMenuItem.$_optionName = "items";
DxContextMenuItem.$_isCollectionItem = true;
var DxDetails = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        columns: Array
    }
});
exports.DxDetails = DxDetails;
DxDetails.$_optionName = "details";
DxDetails.$_expectedChildren = {
    column: { isCollectionItem: true, optionName: "columns" }
};
var DxFileSelectionItem = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        cssClass: String,
        disabled: Boolean,
        html: String,
        locateInMenu: String,
        location: String,
        menuItemTemplate: {},
        name: String,
        options: Object,
        showText: String,
        template: {},
        text: String,
        visible: Boolean,
        widget: String
    }
});
exports.DxFileSelectionItem = DxFileSelectionItem;
DxFileSelectionItem.$_optionName = "fileSelectionItems";
DxFileSelectionItem.$_isCollectionItem = true;
var DxItem = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        beginGroup: Boolean,
        closeMenuOnClick: Boolean,
        cssClass: String,
        disabled: Boolean,
        html: String,
        icon: String,
        items: Array,
        locateInMenu: String,
        location: String,
        menuItemTemplate: {},
        name: String,
        options: Object,
        selectable: Boolean,
        selected: Boolean,
        showText: String,
        template: {},
        text: String,
        visible: Boolean,
        widget: String
    }
});
exports.DxItem = DxItem;
DxItem.$_optionName = "items";
DxItem.$_isCollectionItem = true;
var DxItemView = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        details: Object,
        mode: String,
        showFolders: Boolean,
        showParentFolder: Boolean
    }
});
exports.DxItemView = DxItemView;
DxItemView.$_optionName = "itemView";
DxItemView.$_expectedChildren = {
    details: { isCollectionItem: false, optionName: "details" }
};
var DxPermissions = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        copy: Boolean,
        create: Boolean,
        delete: Boolean,
        download: Boolean,
        move: Boolean,
        rename: Boolean,
        upload: Boolean
    }
});
exports.DxPermissions = DxPermissions;
DxPermissions.$_optionName = "permissions";
var DxToolbar = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        fileSelectionItems: Array,
        items: Array
    }
});
exports.DxToolbar = DxToolbar;
DxToolbar.$_optionName = "toolbar";
DxToolbar.$_expectedChildren = {
    fileSelectionItem: { isCollectionItem: true, optionName: "fileSelectionItems" },
    item: { isCollectionItem: true, optionName: "items" },
    toolbarItem: { isCollectionItem: true, optionName: "items" }
};
var DxToolbarItem = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        cssClass: String,
        disabled: Boolean,
        html: String,
        locateInMenu: String,
        location: String,
        menuItemTemplate: {},
        name: String,
        options: Object,
        showText: String,
        template: {},
        text: String,
        visible: Boolean,
        widget: String
    }
});
exports.DxToolbarItem = DxToolbarItem;
DxToolbarItem.$_optionName = "items";
DxToolbarItem.$_isCollectionItem = true;
var DxUpload = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        chunkSize: Number,
        maxFileSize: Number
    }
});
exports.DxUpload = DxUpload;
DxUpload.$_optionName = "upload";
exports.default = DxFileManager;
