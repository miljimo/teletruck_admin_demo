/*!
 * devextreme-vue
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VueType = require("vue");
var Vue = VueType.default || VueType;
var tree_view_1 = require("devextreme/ui/tree_view");
var component_1 = require("./core/component");
var configuration_component_1 = require("./core/configuration-component");
var DxTreeView = Vue.extend({
    extends: component_1.DxComponent,
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        animationEnabled: Boolean,
        createChildren: Function,
        dataSource: [Array, Object, String],
        dataStructure: String,
        disabled: Boolean,
        disabledExpr: [Function, String],
        displayExpr: [Function, String],
        elementAttr: Object,
        expandAllEnabled: Boolean,
        expandedExpr: [Function, String],
        expandEvent: String,
        expandNodesRecursive: Boolean,
        focusStateEnabled: Boolean,
        hasItemsExpr: [Function, String],
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        itemHoldTimeout: Number,
        items: Array,
        itemsExpr: [Function, String],
        itemTemplate: {},
        keyExpr: [Function, String],
        noDataText: String,
        onContentReady: Function,
        onDisposing: Function,
        onInitialized: Function,
        onItemClick: Function,
        onItemCollapsed: Function,
        onItemContextMenu: Function,
        onItemExpanded: Function,
        onItemHold: Function,
        onItemRendered: Function,
        onItemSelectionChanged: Function,
        onOptionChanged: Function,
        onSelectAllValueChanged: Function,
        onSelectionChanged: Function,
        parentIdExpr: [Function, String],
        rootValue: {},
        rtlEnabled: Boolean,
        scrollDirection: String,
        searchEditorOptions: Object,
        searchEnabled: Boolean,
        searchExpr: [Array, Function, String],
        searchMode: String,
        searchTimeout: Number,
        searchValue: String,
        selectAllText: String,
        selectByClick: Boolean,
        selectedExpr: [Function, String],
        selectionMode: String,
        selectNodesRecursive: Boolean,
        showCheckBoxesMode: String,
        tabIndex: Number,
        virtualModeEnabled: Boolean,
        visible: Boolean,
        width: [Function, Number, String]
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = tree_view_1.default;
        this.$_expectedChildren = {
            item: { isCollectionItem: true, optionName: "items" },
            searchEditorOptions: { isCollectionItem: false, optionName: "searchEditorOptions" }
        };
    }
});
exports.DxTreeView = DxTreeView;
var DxButton = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        location: String,
        name: String,
        options: Object
    }
});
exports.DxButton = DxButton;
DxButton.$_optionName = "buttons";
DxButton.$_isCollectionItem = true;
DxButton.$_expectedChildren = {
    options: { isCollectionItem: false, optionName: "options" }
};
var DxItem = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        disabled: Boolean,
        expanded: Boolean,
        hasItems: Boolean,
        html: String,
        icon: String,
        items: Array,
        parentId: [Number, String],
        selected: Boolean,
        template: {},
        text: String,
        visible: Boolean
    }
});
exports.DxItem = DxItem;
DxItem.$_optionName = "items";
DxItem.$_isCollectionItem = true;
var DxOptions = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        bindingOptions: Object,
        disabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        icon: String,
        onClick: Function,
        onContentReady: Function,
        onDisposing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        rtlEnabled: Boolean,
        stylingMode: String,
        tabIndex: Number,
        template: {},
        text: String,
        type: String,
        useSubmitBehavior: Boolean,
        validationGroup: String,
        visible: Boolean,
        width: [Function, Number, String]
    }
});
exports.DxOptions = DxOptions;
DxOptions.$_optionName = "options";
var DxSearchEditorOptions = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        bindingOptions: Object,
        buttons: Array,
        disabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        inputAttr: Object,
        isValid: Boolean,
        mask: String,
        maskChar: String,
        maskInvalidMessage: String,
        maskRules: Object,
        maxLength: [Number, String],
        mode: String,
        name: String,
        onChange: Function,
        onContentReady: Function,
        onCopy: Function,
        onCut: Function,
        onDisposing: Function,
        onEnterKey: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onInput: Function,
        onKeyDown: Function,
        onKeyPress: Function,
        onKeyUp: Function,
        onOptionChanged: Function,
        onPaste: Function,
        onValueChanged: Function,
        placeholder: String,
        readOnly: Boolean,
        rtlEnabled: Boolean,
        showClearButton: Boolean,
        showMaskMode: String,
        spellcheck: Boolean,
        stylingMode: String,
        tabIndex: Number,
        text: String,
        useMaskedValue: Boolean,
        validationError: Object,
        validationErrors: Array,
        validationMessageMode: String,
        validationStatus: String,
        value: String,
        valueChangeEvent: String,
        visible: Boolean,
        width: [Function, Number, String]
    }
});
exports.DxSearchEditorOptions = DxSearchEditorOptions;
DxSearchEditorOptions.$_optionName = "searchEditorOptions";
DxSearchEditorOptions.$_expectedChildren = {
    button: { isCollectionItem: true, optionName: "buttons" }
};
exports.default = DxTreeView;
