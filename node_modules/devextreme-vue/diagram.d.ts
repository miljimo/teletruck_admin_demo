/*!
 * devextreme-vue
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import * as VueType from "vue";
import Diagram, { IOptions } from "devextreme/ui/diagram";
declare type AccessibleOptions = Pick<IOptions, "autoZoomMode" | "contextMenu" | "contextToolbox" | "customShapes" | "customShapeTemplate" | "defaultItemProperties" | "disabled" | "edges" | "elementAttr" | "export" | "fullScreen" | "gridSize" | "hasChanges" | "height" | "historyToolbar" | "mainToolbar" | "nodes" | "onContentReady" | "onCustomCommand" | "onDisposing" | "onInitialized" | "onItemClick" | "onItemDblClick" | "onOptionChanged" | "onSelectionChanged" | "pageColor" | "pageOrientation" | "pageSize" | "propertiesPanel" | "readOnly" | "rtlEnabled" | "showGrid" | "simpleView" | "snapToGrid" | "toolbox" | "units" | "viewToolbar" | "viewUnits" | "visible" | "width" | "zoomLevel">;
interface DxDiagram extends AccessibleOptions {
    readonly instance?: Diagram;
}
declare const DxDiagram: VueType.VueConstructor<{
    instance: Diagram;
} & {
    autoZoomMode: string;
    contextMenu: any;
    contextToolbox: any;
    customShapes: unknown[];
    customShapeTemplate: unknown;
    defaultItemProperties: any;
    disabled: boolean;
    edges: any;
    elementAttr: any;
    export: any;
    fullScreen: boolean;
    gridSize: any;
    hasChanges: boolean;
    height: string | number | Function;
    historyToolbar: any;
    mainToolbar: any;
    nodes: any;
    onContentReady: Function;
    onCustomCommand: Function;
    onDisposing: Function;
    onInitialized: Function;
    onItemClick: Function;
    onItemDblClick: Function;
    onOptionChanged: Function;
    onSelectionChanged: Function;
    pageColor: string;
    pageOrientation: string;
    pageSize: any;
    propertiesPanel: any;
    readOnly: boolean;
    rtlEnabled: boolean;
    showGrid: boolean;
    simpleView: boolean;
    snapToGrid: boolean;
    toolbox: any;
    units: string;
    viewToolbar: any;
    viewUnits: string;
    visible: boolean;
    width: string | number | Function;
    zoomLevel: any;
} & VueType.default>;
declare const DxAutoLayout: any;
declare const DxCommand: any;
declare const DxCommandItem: any;
declare const DxConnectionPoint: any;
declare const DxContextMenu: any;
declare const DxContextToolbox: any;
declare const DxCustomShape: any;
declare const DxDefaultItemProperties: any;
declare const DxEdges: any;
declare const DxExport: any;
declare const DxGridSize: any;
declare const DxGroup: any;
declare const DxHistoryToolbar: any;
declare const DxItem: any;
declare const DxMainToolbar: any;
declare const DxNodes: any;
declare const DxPageSize: any;
declare const DxPageSizeItem: any;
declare const DxPropertiesPanel: any;
declare const DxTab: any;
declare const DxTabGroup: any;
declare const DxToolbox: any;
declare const DxToolboxGroup: any;
declare const DxViewToolbar: any;
declare const DxZoomLevel: any;
export default DxDiagram;
export { DxDiagram, DxAutoLayout, DxCommand, DxCommandItem, DxConnectionPoint, DxContextMenu, DxContextToolbox, DxCustomShape, DxDefaultItemProperties, DxEdges, DxExport, DxGridSize, DxGroup, DxHistoryToolbar, DxItem, DxMainToolbar, DxNodes, DxPageSize, DxPageSizeItem, DxPropertiesPanel, DxTab, DxTabGroup, DxToolbox, DxToolboxGroup, DxViewToolbar, DxZoomLevel };
