/*!
 * devextreme-vue
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import * as VueType from "vue";
import FileUploader, { IOptions } from "devextreme/ui/file_uploader";
declare type AccessibleOptions = Pick<IOptions, "abortUpload" | "accept" | "accessKey" | "activeStateEnabled" | "allowCanceling" | "allowedFileExtensions" | "chunkSize" | "disabled" | "elementAttr" | "focusStateEnabled" | "height" | "hint" | "hoverStateEnabled" | "inputAttr" | "invalidFileExtensionMessage" | "invalidMaxFileSizeMessage" | "invalidMinFileSizeMessage" | "isValid" | "labelText" | "maxFileSize" | "minFileSize" | "multiple" | "name" | "onContentReady" | "onDisposing" | "onInitialized" | "onOptionChanged" | "onProgress" | "onUploadAborted" | "onUploaded" | "onUploadError" | "onUploadStarted" | "onValueChanged" | "progress" | "readOnly" | "readyToUploadMessage" | "rtlEnabled" | "selectButtonText" | "showFileList" | "tabIndex" | "uploadButtonText" | "uploadChunk" | "uploadedMessage" | "uploadFailedMessage" | "uploadFile" | "uploadHeaders" | "uploadMethod" | "uploadMode" | "uploadUrl" | "validationError" | "validationErrors" | "validationStatus" | "value" | "visible" | "width">;
interface DxFileUploader extends AccessibleOptions {
    readonly instance?: FileUploader;
}
declare const DxFileUploader: VueType.VueConstructor<{
    instance: FileUploader;
} & {
    abortUpload: Function;
    accept: string;
    accessKey: string;
    activeStateEnabled: boolean;
    allowCanceling: boolean;
    allowedFileExtensions: unknown[];
    chunkSize: number;
    disabled: boolean;
    elementAttr: any;
    focusStateEnabled: boolean;
    height: string | number | Function;
    hint: string;
    hoverStateEnabled: boolean;
    inputAttr: any;
    invalidFileExtensionMessage: string;
    invalidMaxFileSizeMessage: string;
    invalidMinFileSizeMessage: string;
    isValid: boolean;
    labelText: string;
    maxFileSize: number;
    minFileSize: number;
    multiple: boolean;
    name: string;
    onContentReady: Function;
    onDisposing: Function;
    onInitialized: Function;
    onOptionChanged: Function;
    onProgress: Function;
    onUploadAborted: Function;
    onUploaded: Function;
    onUploadError: Function;
    onUploadStarted: Function;
    onValueChanged: Function;
    progress: number;
    readOnly: boolean;
    readyToUploadMessage: string;
    rtlEnabled: boolean;
    selectButtonText: string;
    showFileList: boolean;
    tabIndex: number;
    uploadButtonText: string;
    uploadChunk: Function;
    uploadedMessage: string;
    uploadFailedMessage: string;
    uploadFile: Function;
    uploadHeaders: any;
    uploadMethod: string;
    uploadMode: string;
    uploadUrl: string;
    validationError: any;
    validationErrors: unknown[];
    validationStatus: string;
    value: unknown[];
    visible: boolean;
    width: string | number | Function;
} & VueType.default>;
export default DxFileUploader;
export { DxFileUploader };
