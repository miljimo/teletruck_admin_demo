/*!
 * devextreme-vue
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import * as VueType from "vue";
import List, { IOptions } from "devextreme/ui/list";
declare type AccessibleOptions = Pick<IOptions, "accessKey" | "activeStateEnabled" | "allowItemDeleting" | "bounceEnabled" | "collapsibleGroups" | "dataSource" | "disabled" | "displayExpr" | "elementAttr" | "focusStateEnabled" | "grouped" | "groupTemplate" | "height" | "hint" | "hoverStateEnabled" | "indicateLoading" | "itemDeleteMode" | "itemDragging" | "itemHoldTimeout" | "items" | "itemTemplate" | "keyExpr" | "menuItems" | "menuMode" | "nextButtonText" | "noDataText" | "onContentReady" | "onDisposing" | "onGroupRendered" | "onInitialized" | "onItemClick" | "onItemContextMenu" | "onItemDeleted" | "onItemDeleting" | "onItemHold" | "onItemRendered" | "onItemReordered" | "onItemSwipe" | "onOptionChanged" | "onPageLoading" | "onPullRefresh" | "onScroll" | "onSelectAllValueChanged" | "onSelectionChanged" | "pageLoadingText" | "pageLoadMode" | "pulledDownText" | "pullingDownText" | "pullRefreshEnabled" | "refreshingText" | "repaintChangesOnly" | "rtlEnabled" | "scrollByContent" | "scrollByThumb" | "scrollingEnabled" | "searchEditorOptions" | "searchEnabled" | "searchExpr" | "searchMode" | "searchTimeout" | "searchValue" | "selectAllMode" | "selectedItemKeys" | "selectedItems" | "selectionMode" | "showScrollbar" | "showSelectionControls" | "tabIndex" | "useNativeScrolling" | "visible" | "width">;
interface DxList extends AccessibleOptions {
    readonly instance?: List;
}
declare const DxList: VueType.VueConstructor<{
    instance: List;
} & {
    accessKey: string;
    activeStateEnabled: boolean;
    allowItemDeleting: boolean;
    bounceEnabled: boolean;
    collapsibleGroups: boolean;
    dataSource: any;
    disabled: boolean;
    displayExpr: TimerHandler;
    elementAttr: any;
    focusStateEnabled: boolean;
    grouped: boolean;
    groupTemplate: unknown;
    height: string | number | Function;
    hint: string;
    hoverStateEnabled: boolean;
    indicateLoading: boolean;
    itemDeleteMode: string;
    itemDragging: any;
    itemHoldTimeout: number;
    items: unknown[];
    itemTemplate: unknown;
    keyExpr: TimerHandler;
    menuItems: unknown[];
    menuMode: string;
    nextButtonText: string;
    noDataText: string;
    onContentReady: Function;
    onDisposing: Function;
    onGroupRendered: Function;
    onInitialized: Function;
    onItemClick: TimerHandler;
    onItemContextMenu: Function;
    onItemDeleted: Function;
    onItemDeleting: Function;
    onItemHold: Function;
    onItemRendered: Function;
    onItemReordered: Function;
    onItemSwipe: Function;
    onOptionChanged: Function;
    onPageLoading: Function;
    onPullRefresh: Function;
    onScroll: Function;
    onSelectAllValueChanged: Function;
    onSelectionChanged: Function;
    pageLoadingText: string;
    pageLoadMode: string;
    pulledDownText: string;
    pullingDownText: string;
    pullRefreshEnabled: boolean;
    refreshingText: string;
    repaintChangesOnly: boolean;
    rtlEnabled: boolean;
    scrollByContent: boolean;
    scrollByThumb: boolean;
    scrollingEnabled: boolean;
    searchEditorOptions: any;
    searchEnabled: boolean;
    searchExpr: string | Function | unknown[];
    searchMode: string;
    searchTimeout: number;
    searchValue: string;
    selectAllMode: string;
    selectedItemKeys: unknown[];
    selectedItems: unknown[];
    selectionMode: string;
    showScrollbar: string;
    showSelectionControls: boolean;
    tabIndex: number;
    useNativeScrolling: boolean;
    visible: boolean;
    width: string | number | Function;
} & VueType.default>;
declare const DxButton: any;
declare const DxCursorOffset: any;
declare const DxItem: any;
declare const DxItemDragging: any;
declare const DxMenuItem: any;
declare const DxOptions: any;
declare const DxSearchEditorOptions: any;
export default DxList;
export { DxList, DxButton, DxCursorOffset, DxItem, DxItemDragging, DxMenuItem, DxOptions, DxSearchEditorOptions };
