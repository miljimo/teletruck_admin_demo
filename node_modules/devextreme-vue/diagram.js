/*!
 * devextreme-vue
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VueType = require("vue");
var Vue = VueType.default || VueType;
var diagram_1 = require("devextreme/ui/diagram");
var component_1 = require("./core/component");
var configuration_component_1 = require("./core/configuration-component");
var DxDiagram = Vue.extend({
    extends: component_1.DxComponent,
    props: {
        autoZoomMode: String,
        contextMenu: Object,
        contextToolbox: Object,
        customShapes: Array,
        customShapeTemplate: {},
        defaultItemProperties: Object,
        disabled: Boolean,
        edges: Object,
        elementAttr: Object,
        export: Object,
        fullScreen: Boolean,
        gridSize: [Number, Object],
        hasChanges: Boolean,
        height: [Function, Number, String],
        historyToolbar: Object,
        mainToolbar: Object,
        nodes: Object,
        onContentReady: Function,
        onCustomCommand: Function,
        onDisposing: Function,
        onInitialized: Function,
        onItemClick: Function,
        onItemDblClick: Function,
        onOptionChanged: Function,
        onSelectionChanged: Function,
        pageColor: String,
        pageOrientation: String,
        pageSize: Object,
        propertiesPanel: Object,
        readOnly: Boolean,
        rtlEnabled: Boolean,
        showGrid: Boolean,
        simpleView: Boolean,
        snapToGrid: Boolean,
        toolbox: Object,
        units: String,
        viewToolbar: Object,
        viewUnits: String,
        visible: Boolean,
        width: [Function, Number, String],
        zoomLevel: [Number, Object]
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = diagram_1.default;
        this.$_expectedChildren = {
            contextMenu: { isCollectionItem: false, optionName: "contextMenu" },
            contextToolbox: { isCollectionItem: false, optionName: "contextToolbox" },
            customShape: { isCollectionItem: true, optionName: "customShapes" },
            defaultItemProperties: { isCollectionItem: false, optionName: "defaultItemProperties" },
            edges: { isCollectionItem: false, optionName: "edges" },
            export: { isCollectionItem: false, optionName: "export" },
            gridSize: { isCollectionItem: false, optionName: "gridSize" },
            historyToolbar: { isCollectionItem: false, optionName: "historyToolbar" },
            mainToolbar: { isCollectionItem: false, optionName: "mainToolbar" },
            nodes: { isCollectionItem: false, optionName: "nodes" },
            pageSize: { isCollectionItem: false, optionName: "pageSize" },
            propertiesPanel: { isCollectionItem: false, optionName: "propertiesPanel" },
            toolbox: { isCollectionItem: false, optionName: "toolbox" },
            viewToolbar: { isCollectionItem: false, optionName: "viewToolbar" },
            zoomLevel: { isCollectionItem: false, optionName: "zoomLevel" }
        };
    }
});
exports.DxDiagram = DxDiagram;
var DxAutoLayout = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        orientation: String,
        type: String
    }
});
exports.DxAutoLayout = DxAutoLayout;
DxAutoLayout.$_optionName = "autoLayout";
var DxCommand = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        icon: String,
        items: Array,
        name: String,
        text: String
    }
});
exports.DxCommand = DxCommand;
DxCommand.$_optionName = "commands";
DxCommand.$_isCollectionItem = true;
var DxCommandItem = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        icon: String,
        items: Array,
        name: String,
        text: String
    }
});
exports.DxCommandItem = DxCommandItem;
DxCommandItem.$_optionName = "items";
DxCommandItem.$_isCollectionItem = true;
var DxConnectionPoint = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        x: Number,
        y: Number
    }
});
exports.DxConnectionPoint = DxConnectionPoint;
DxConnectionPoint.$_optionName = "connectionPoints";
DxConnectionPoint.$_isCollectionItem = true;
var DxContextMenu = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        commands: Array,
        enabled: Boolean
    }
});
exports.DxContextMenu = DxContextMenu;
DxContextMenu.$_optionName = "contextMenu";
DxContextMenu.$_expectedChildren = {
    command: { isCollectionItem: true, optionName: "commands" }
};
var DxContextToolbox = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        category: String,
        displayMode: String,
        enabled: Boolean,
        shapes: Array
    }
});
exports.DxContextToolbox = DxContextToolbox;
DxContextToolbox.$_optionName = "contextToolbox";
var DxCustomShape = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        allowEditImage: Boolean,
        allowEditText: Boolean,
        allowResize: Boolean,
        backgroundImageHeight: Number,
        backgroundImageLeft: Number,
        backgroundImageToolboxUrl: String,
        backgroundImageTop: Number,
        backgroundImageUrl: String,
        backgroundImageWidth: Number,
        baseType: String,
        category: String,
        connectionPoints: Array,
        defaultHeight: Number,
        defaultImageUrl: String,
        defaultText: String,
        defaultWidth: Number,
        imageHeight: Number,
        imageLeft: Number,
        imageTop: Number,
        imageWidth: Number,
        maxHeight: Number,
        maxWidth: Number,
        minHeight: Number,
        minWidth: Number,
        template: {},
        templateHeight: Number,
        templateLeft: Number,
        templateTop: Number,
        templateWidth: Number,
        textHeight: Number,
        textLeft: Number,
        textTop: Number,
        textWidth: Number,
        title: String,
        type: String
    }
});
exports.DxCustomShape = DxCustomShape;
DxCustomShape.$_optionName = "customShapes";
DxCustomShape.$_isCollectionItem = true;
DxCustomShape.$_expectedChildren = {
    connectionPoint: { isCollectionItem: true, optionName: "connectionPoints" }
};
var DxDefaultItemProperties = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        connectorLineEnd: String,
        connectorLineStart: String,
        connectorLineType: String,
        style: Object,
        textStyle: Object
    }
});
exports.DxDefaultItemProperties = DxDefaultItemProperties;
DxDefaultItemProperties.$_optionName = "defaultItemProperties";
var DxEdges = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        dataSource: [Array, Object],
        fromExpr: [Function, String],
        fromLineEndExpr: [Function, String],
        fromPointIndexExpr: [Function, String],
        keyExpr: [Function, String],
        lineTypeExpr: [Function, String],
        lockedExpr: [Function, String],
        pointsExpr: [Function, String],
        styleExpr: [Function, String],
        textExpr: [Function, String],
        textStyleExpr: [Function, String],
        toExpr: [Function, String],
        toLineEndExpr: [Function, String],
        toPointIndexExpr: [Function, String],
        zIndexExpr: [Function, String]
    }
});
exports.DxEdges = DxEdges;
DxEdges.$_optionName = "edges";
var DxExport = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        fileName: String,
        proxyUrl: String
    }
});
exports.DxExport = DxExport;
DxExport.$_optionName = "export";
var DxGridSize = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        items: Array,
        value: Number
    }
});
exports.DxGridSize = DxGridSize;
DxGridSize.$_optionName = "gridSize";
var DxGroup = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        category: String,
        commands: Array,
        displayMode: String,
        expanded: Boolean,
        shapes: Array,
        title: String
    }
});
exports.DxGroup = DxGroup;
DxGroup.$_optionName = "groups";
DxGroup.$_isCollectionItem = true;
var DxHistoryToolbar = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        commands: Array,
        visible: Boolean
    }
});
exports.DxHistoryToolbar = DxHistoryToolbar;
DxHistoryToolbar.$_optionName = "historyToolbar";
DxHistoryToolbar.$_expectedChildren = {
    command: { isCollectionItem: true, optionName: "commands" }
};
var DxItem = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        height: Number,
        icon: String,
        items: Array,
        name: String,
        text: String,
        width: Number
    }
});
exports.DxItem = DxItem;
DxItem.$_optionName = "items";
DxItem.$_isCollectionItem = true;
var DxMainToolbar = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        commands: Array,
        visible: Boolean
    }
});
exports.DxMainToolbar = DxMainToolbar;
DxMainToolbar.$_optionName = "mainToolbar";
DxMainToolbar.$_expectedChildren = {
    command: { isCollectionItem: true, optionName: "commands" }
};
var DxNodes = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        autoLayout: [Object, String],
        containerChildrenExpr: [Function, String],
        containerKeyExpr: [Function, String],
        dataSource: [Array, Object],
        heightExpr: [Function, String],
        imageUrlExpr: [Function, String],
        itemsExpr: [Function, String],
        keyExpr: [Function, String],
        leftExpr: [Function, String],
        lockedExpr: [Function, String],
        parentKeyExpr: [Function, String],
        styleExpr: [Function, String],
        textExpr: [Function, String],
        textStyleExpr: [Function, String],
        topExpr: [Function, String],
        typeExpr: [Function, String],
        widthExpr: [Function, String],
        zIndexExpr: [Function, String]
    }
});
exports.DxNodes = DxNodes;
DxNodes.$_optionName = "nodes";
DxNodes.$_expectedChildren = {
    autoLayout: { isCollectionItem: false, optionName: "autoLayout" }
};
var DxPageSize = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        height: Number,
        items: Array,
        width: Number
    }
});
exports.DxPageSize = DxPageSize;
DxPageSize.$_optionName = "pageSize";
DxPageSize.$_expectedChildren = {
    item: { isCollectionItem: true, optionName: "items" },
    pageSizeItem: { isCollectionItem: true, optionName: "items" }
};
var DxPageSizeItem = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        height: Number,
        text: String,
        width: Number
    }
});
exports.DxPageSizeItem = DxPageSizeItem;
DxPageSizeItem.$_optionName = "items";
DxPageSizeItem.$_isCollectionItem = true;
var DxPropertiesPanel = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        tabs: Array,
        visibility: String
    }
});
exports.DxPropertiesPanel = DxPropertiesPanel;
DxPropertiesPanel.$_optionName = "propertiesPanel";
DxPropertiesPanel.$_expectedChildren = {
    tab: { isCollectionItem: true, optionName: "tabs" }
};
var DxTab = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        commands: Array,
        groups: Array,
        title: String
    }
});
exports.DxTab = DxTab;
DxTab.$_optionName = "tabs";
DxTab.$_isCollectionItem = true;
DxTab.$_expectedChildren = {
    command: { isCollectionItem: true, optionName: "commands" },
    group: { isCollectionItem: true, optionName: "groups" },
    tabGroup: { isCollectionItem: true, optionName: "groups" }
};
var DxTabGroup = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        commands: Array,
        title: String
    }
});
exports.DxTabGroup = DxTabGroup;
DxTabGroup.$_optionName = "groups";
DxTabGroup.$_isCollectionItem = true;
DxTabGroup.$_expectedChildren = {
    command: { isCollectionItem: true, optionName: "commands" }
};
var DxToolbox = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        groups: Array,
        visibility: String
    }
});
exports.DxToolbox = DxToolbox;
DxToolbox.$_optionName = "toolbox";
DxToolbox.$_expectedChildren = {
    group: { isCollectionItem: true, optionName: "groups" },
    toolboxGroup: { isCollectionItem: true, optionName: "groups" }
};
var DxToolboxGroup = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        category: String,
        displayMode: String,
        expanded: Boolean,
        shapes: Array,
        title: String
    }
});
exports.DxToolboxGroup = DxToolboxGroup;
DxToolboxGroup.$_optionName = "groups";
DxToolboxGroup.$_isCollectionItem = true;
var DxViewToolbar = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        commands: Array,
        visible: Boolean
    }
});
exports.DxViewToolbar = DxViewToolbar;
DxViewToolbar.$_optionName = "viewToolbar";
DxViewToolbar.$_expectedChildren = {
    command: { isCollectionItem: true, optionName: "commands" }
};
var DxZoomLevel = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        items: Array,
        value: Number
    }
});
exports.DxZoomLevel = DxZoomLevel;
DxZoomLevel.$_optionName = "zoomLevel";
exports.default = DxDiagram;
