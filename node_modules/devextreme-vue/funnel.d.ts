/*!
 * devextreme-vue
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import * as VueType from "vue";
import Funnel, { IOptions } from "devextreme/viz/funnel";
declare type AccessibleOptions = Pick<IOptions, "adaptiveLayout" | "algorithm" | "argumentField" | "colorField" | "dataSource" | "disabled" | "elementAttr" | "export" | "hoverEnabled" | "inverted" | "item" | "label" | "legend" | "loadingIndicator" | "margin" | "neckHeight" | "neckWidth" | "onDisposing" | "onDrawn" | "onExported" | "onExporting" | "onFileSaving" | "onHoverChanged" | "onIncidentOccurred" | "onInitialized" | "onItemClick" | "onLegendClick" | "onOptionChanged" | "onSelectionChanged" | "palette" | "paletteExtensionMode" | "pathModified" | "redrawOnResize" | "resolveLabelOverlapping" | "rtlEnabled" | "selectionMode" | "size" | "sortData" | "theme" | "title" | "tooltip" | "valueField">;
interface DxFunnel extends AccessibleOptions {
    readonly instance?: Funnel;
}
declare const DxFunnel: VueType.VueConstructor<{
    instance: Funnel;
} & {
    adaptiveLayout: any;
    algorithm: string;
    argumentField: string;
    colorField: string;
    dataSource: any;
    disabled: boolean;
    elementAttr: any;
    export: any;
    hoverEnabled: boolean;
    inverted: boolean;
    item: any;
    label: any;
    legend: any;
    loadingIndicator: any;
    margin: any;
    neckHeight: number;
    neckWidth: number;
    onDisposing: Function;
    onDrawn: Function;
    onExported: Function;
    onExporting: Function;
    onFileSaving: Function;
    onHoverChanged: Function;
    onIncidentOccurred: Function;
    onInitialized: Function;
    onItemClick: TimerHandler;
    onLegendClick: TimerHandler;
    onOptionChanged: Function;
    onSelectionChanged: Function;
    palette: string | unknown[];
    paletteExtensionMode: string;
    pathModified: boolean;
    redrawOnResize: boolean;
    resolveLabelOverlapping: string;
    rtlEnabled: boolean;
    selectionMode: string;
    size: any;
    sortData: boolean;
    theme: string;
    title: any;
    tooltip: any;
    valueField: string;
} & VueType.default>;
declare const DxAdaptiveLayout: any;
declare const DxBorder: any;
declare const DxConnector: any;
declare const DxExport: any;
declare const DxFont: any;
declare const DxFormat: any;
declare const DxFunnelTitle: any;
declare const DxFunnelTitleSubtitle: any;
declare const DxHatching: any;
declare const DxHoverStyle: any;
declare const DxItem: any;
declare const DxItemBorder: any;
declare const DxLabel: any;
declare const DxLabelBorder: any;
declare const DxLegend: any;
declare const DxLegendBorder: any;
declare const DxLegendTitle: any;
declare const DxLegendTitleSubtitle: any;
declare const DxLoadingIndicator: any;
declare const DxMargin: any;
declare const DxSelectionStyle: any;
declare const DxShadow: any;
declare const DxSize: any;
declare const DxSubtitle: any;
declare const DxTitle: any;
declare const DxTooltip: any;
declare const DxTooltipBorder: any;
export default DxFunnel;
export { DxFunnel, DxAdaptiveLayout, DxBorder, DxConnector, DxExport, DxFont, DxFormat, DxFunnelTitle, DxFunnelTitleSubtitle, DxHatching, DxHoverStyle, DxItem, DxItemBorder, DxLabel, DxLabelBorder, DxLegend, DxLegendBorder, DxLegendTitle, DxLegendTitleSubtitle, DxLoadingIndicator, DxMargin, DxSelectionStyle, DxShadow, DxSize, DxSubtitle, DxTitle, DxTooltip, DxTooltipBorder };
