/*!
 * devextreme-vue
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VueType = require("vue");
var Vue = VueType.default || VueType;
var html_editor_1 = require("devextreme/ui/html_editor");
var component_1 = require("./core/component");
var configuration_component_1 = require("./core/configuration-component");
var DxHtmlEditor = Vue.extend({
    extends: component_1.DxComponent,
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        customizeModules: Function,
        disabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        isValid: Boolean,
        mediaResizing: Object,
        mentions: Array,
        name: String,
        onContentReady: Function,
        onDisposing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onValueChanged: Function,
        placeholder: String,
        readOnly: Boolean,
        rtlEnabled: Boolean,
        tabIndex: Number,
        toolbar: Object,
        validationError: Object,
        validationErrors: Array,
        validationMessageMode: String,
        validationStatus: String,
        value: {},
        valueType: String,
        variables: Object,
        visible: Boolean,
        width: [Function, Number, String]
    },
    model: { prop: "value", event: "update:value" },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = html_editor_1.default;
        this.$_expectedChildren = {
            mediaResizing: { isCollectionItem: false, optionName: "mediaResizing" },
            mention: { isCollectionItem: true, optionName: "mentions" },
            toolbar: { isCollectionItem: false, optionName: "toolbar" },
            variables: { isCollectionItem: false, optionName: "variables" }
        };
    }
});
exports.DxHtmlEditor = DxHtmlEditor;
var DxItem = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        cssClass: String,
        disabled: Boolean,
        formatName: String,
        formatValues: Array,
        html: String,
        locateInMenu: String,
        location: String,
        menuItemTemplate: {},
        options: Object,
        showText: String,
        template: {},
        text: String,
        visible: Boolean,
        widget: String
    }
});
exports.DxItem = DxItem;
DxItem.$_optionName = "items";
DxItem.$_isCollectionItem = true;
var DxMediaResizing = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        allowedTargets: Array,
        enabled: Boolean
    }
});
exports.DxMediaResizing = DxMediaResizing;
DxMediaResizing.$_optionName = "mediaResizing";
var DxMention = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        dataSource: [Array, Object],
        displayExpr: [Function, String],
        itemTemplate: {},
        marker: String,
        minSearchLength: Number,
        searchExpr: [Array, Function, String],
        searchTimeout: Number,
        template: {},
        valueExpr: [Function, String]
    }
});
exports.DxMention = DxMention;
DxMention.$_optionName = "mentions";
DxMention.$_isCollectionItem = true;
var DxToolbar = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        container: {},
        items: Array,
        multiline: Boolean
    }
});
exports.DxToolbar = DxToolbar;
DxToolbar.$_optionName = "toolbar";
DxToolbar.$_expectedChildren = {
    item: { isCollectionItem: true, optionName: "items" }
};
var DxVariables = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        dataSource: [Array, Object, String],
        escapeChar: [Array, String]
    }
});
exports.DxVariables = DxVariables;
DxVariables.$_optionName = "variables";
exports.default = DxHtmlEditor;
