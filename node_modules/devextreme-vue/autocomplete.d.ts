/*!
 * devextreme-vue
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import * as VueType from "vue";
import Autocomplete, { IOptions } from "devextreme/ui/autocomplete";
declare type AccessibleOptions = Pick<IOptions, "accessKey" | "activeStateEnabled" | "buttons" | "dataSource" | "deferRendering" | "disabled" | "displayValue" | "dropDownButtonTemplate" | "dropDownOptions" | "elementAttr" | "focusStateEnabled" | "grouped" | "groupTemplate" | "height" | "hint" | "hoverStateEnabled" | "inputAttr" | "isValid" | "items" | "itemTemplate" | "maxItemCount" | "maxLength" | "minSearchLength" | "name" | "onChange" | "onClosed" | "onContentReady" | "onCopy" | "onCut" | "onDisposing" | "onEnterKey" | "onFocusIn" | "onFocusOut" | "onInitialized" | "onInput" | "onItemClick" | "onKeyDown" | "onKeyUp" | "onOpened" | "onOptionChanged" | "onPaste" | "onSelectionChanged" | "onValueChanged" | "opened" | "openOnFieldClick" | "placeholder" | "readOnly" | "rtlEnabled" | "searchExpr" | "searchMode" | "searchTimeout" | "selectedItem" | "showClearButton" | "showDropDownButton" | "spellcheck" | "stylingMode" | "tabIndex" | "text" | "validationError" | "validationErrors" | "validationMessageMode" | "validationStatus" | "value" | "valueChangeEvent" | "valueExpr" | "visible" | "width" | "wrapItemText">;
interface DxAutocomplete extends AccessibleOptions {
    readonly instance?: Autocomplete;
}
declare const DxAutocomplete: VueType.VueConstructor<{
    instance: Autocomplete;
} & {
    accessKey: string;
    activeStateEnabled: boolean;
    buttons: unknown[];
    dataSource: any;
    deferRendering: boolean;
    disabled: boolean;
    displayValue: string;
    dropDownButtonTemplate: unknown;
    dropDownOptions: any;
    elementAttr: any;
    focusStateEnabled: boolean;
    grouped: boolean;
    groupTemplate: unknown;
    height: string | number | Function;
    hint: string;
    hoverStateEnabled: boolean;
    inputAttr: any;
    isValid: boolean;
    items: unknown[];
    itemTemplate: unknown;
    maxItemCount: number;
    maxLength: string | number;
    minSearchLength: number;
    name: string;
    onChange: Function;
    onClosed: Function;
    onContentReady: Function;
    onCopy: Function;
    onCut: Function;
    onDisposing: Function;
    onEnterKey: Function;
    onFocusIn: Function;
    onFocusOut: Function;
    onInitialized: Function;
    onInput: Function;
    onItemClick: Function;
    onKeyDown: Function;
    onKeyUp: Function;
    onOpened: Function;
    onOptionChanged: Function;
    onPaste: Function;
    onSelectionChanged: Function;
    onValueChanged: Function;
    opened: boolean;
    openOnFieldClick: boolean;
    placeholder: string;
    readOnly: boolean;
    rtlEnabled: boolean;
    searchExpr: string | Function | unknown[];
    searchMode: string;
    searchTimeout: number;
    selectedItem: unknown;
    showClearButton: boolean;
    showDropDownButton: boolean;
    spellcheck: boolean;
    stylingMode: string;
    tabIndex: number;
    text: string;
    validationError: any;
    validationErrors: unknown[];
    validationMessageMode: string;
    validationStatus: string;
    value: string;
    valueChangeEvent: string;
    valueExpr: TimerHandler;
    visible: boolean;
    width: string | number | Function;
    wrapItemText: boolean;
} & VueType.default>;
declare const DxAnimation: any;
declare const DxAt: any;
declare const DxBoundaryOffset: any;
declare const DxButton: any;
declare const DxCollision: any;
declare const DxDropDownOptions: any;
declare const DxHide: any;
declare const DxItem: any;
declare const DxMy: any;
declare const DxOffset: any;
declare const DxOptions: any;
declare const DxPosition: any;
declare const DxShow: any;
declare const DxToolbarItem: any;
export default DxAutocomplete;
export { DxAutocomplete, DxAnimation, DxAt, DxBoundaryOffset, DxButton, DxCollision, DxDropDownOptions, DxHide, DxItem, DxMy, DxOffset, DxOptions, DxPosition, DxShow, DxToolbarItem };
