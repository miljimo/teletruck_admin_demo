/*!
 * devextreme-vue
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import * as VueType from "vue";
import Lookup, { IOptions } from "devextreme/ui/lookup";
declare type AccessibleOptions = Pick<IOptions, "accessKey" | "activeStateEnabled" | "applyButtonText" | "applyValueMode" | "cancelButtonText" | "cleanSearchOnOpening" | "clearButtonText" | "dataSource" | "deferRendering" | "disabled" | "displayExpr" | "displayValue" | "dropDownOptions" | "elementAttr" | "fieldTemplate" | "focusStateEnabled" | "grouped" | "groupTemplate" | "height" | "hint" | "hoverStateEnabled" | "inputAttr" | "isValid" | "itemCenteringEnabled" | "items" | "itemTemplate" | "minSearchLength" | "name" | "nextButtonText" | "noDataText" | "onClosed" | "onContentReady" | "onDisposing" | "onInitialized" | "onItemClick" | "onOpened" | "onOptionChanged" | "onPageLoading" | "onPullRefresh" | "onScroll" | "onSelectionChanged" | "onValueChanged" | "opened" | "pageLoadingText" | "pageLoadMode" | "placeholder" | "pulledDownText" | "pullingDownText" | "pullRefreshEnabled" | "refreshingText" | "rtlEnabled" | "searchEnabled" | "searchExpr" | "searchMode" | "searchPlaceholder" | "searchTimeout" | "selectedItem" | "showCancelButton" | "showClearButton" | "showDataBeforeSearch" | "stylingMode" | "tabIndex" | "text" | "useNativeScrolling" | "usePopover" | "validationError" | "validationErrors" | "validationMessageMode" | "validationStatus" | "value" | "valueChangeEvent" | "valueExpr" | "visible" | "width" | "wrapItemText">;
interface DxLookup extends AccessibleOptions {
    readonly instance?: Lookup;
}
declare const DxLookup: VueType.VueConstructor<{
    instance: Lookup;
} & {
    accessKey: string;
    activeStateEnabled: boolean;
    applyButtonText: string;
    applyValueMode: string;
    cancelButtonText: string;
    cleanSearchOnOpening: boolean;
    clearButtonText: string;
    dataSource: any;
    deferRendering: boolean;
    disabled: boolean;
    displayExpr: TimerHandler;
    displayValue: string;
    dropDownOptions: any;
    elementAttr: any;
    fieldTemplate: unknown;
    focusStateEnabled: boolean;
    grouped: boolean;
    groupTemplate: unknown;
    height: string | number | Function;
    hint: string;
    hoverStateEnabled: boolean;
    inputAttr: any;
    isValid: boolean;
    itemCenteringEnabled: boolean;
    items: unknown[];
    itemTemplate: unknown;
    minSearchLength: number;
    name: string;
    nextButtonText: string;
    noDataText: string;
    onClosed: Function;
    onContentReady: Function;
    onDisposing: Function;
    onInitialized: Function;
    onItemClick: Function;
    onOpened: Function;
    onOptionChanged: Function;
    onPageLoading: Function;
    onPullRefresh: Function;
    onScroll: Function;
    onSelectionChanged: Function;
    onValueChanged: Function;
    opened: boolean;
    pageLoadingText: string;
    pageLoadMode: string;
    placeholder: string;
    pulledDownText: string;
    pullingDownText: string;
    pullRefreshEnabled: boolean;
    refreshingText: string;
    rtlEnabled: boolean;
    searchEnabled: boolean;
    searchExpr: string | Function | unknown[];
    searchMode: string;
    searchPlaceholder: string;
    searchTimeout: number;
    selectedItem: unknown;
    showCancelButton: boolean;
    showClearButton: boolean;
    showDataBeforeSearch: boolean;
    stylingMode: string;
    tabIndex: number;
    text: string;
    useNativeScrolling: boolean;
    usePopover: boolean;
    validationError: any;
    validationErrors: unknown[];
    validationMessageMode: string;
    validationStatus: string;
    value: unknown;
    valueChangeEvent: string;
    valueExpr: TimerHandler;
    visible: boolean;
    width: string | number | Function;
    wrapItemText: boolean;
} & VueType.default>;
declare const DxAnimation: any;
declare const DxAt: any;
declare const DxBoundaryOffset: any;
declare const DxCollision: any;
declare const DxDropDownOptions: any;
declare const DxHide: any;
declare const DxHideEvent: any;
declare const DxItem: any;
declare const DxMy: any;
declare const DxOffset: any;
declare const DxPosition: any;
declare const DxShow: any;
declare const DxShowEvent: any;
declare const DxToolbarItem: any;
export default DxLookup;
export { DxLookup, DxAnimation, DxAt, DxBoundaryOffset, DxCollision, DxDropDownOptions, DxHide, DxHideEvent, DxItem, DxMy, DxOffset, DxPosition, DxShow, DxShowEvent, DxToolbarItem };
