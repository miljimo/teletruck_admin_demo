/*!
 * devextreme-vue
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VueType = require("vue");
var Vue = VueType.default || VueType;
var vector_map_1 = require("devextreme/viz/vector_map");
var component_1 = require("./core/component");
var configuration_component_1 = require("./core/configuration-component");
var DxVectorMap = Vue.extend({
    extends: component_1.DxComponent,
    props: {
        background: Object,
        bounds: Array,
        center: Array,
        controlBar: Object,
        disabled: Boolean,
        elementAttr: Object,
        export: Object,
        layers: [Array, Object],
        legends: Array,
        loadingIndicator: Object,
        maxZoomFactor: Number,
        onCenterChanged: Function,
        onClick: [Function, String],
        onDisposing: Function,
        onDrawn: Function,
        onExported: Function,
        onExporting: Function,
        onFileSaving: Function,
        onIncidentOccurred: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onSelectionChanged: Function,
        onTooltipHidden: Function,
        onTooltipShown: Function,
        onZoomFactorChanged: Function,
        panningEnabled: Boolean,
        pathModified: Boolean,
        projection: [Object, String],
        redrawOnResize: Boolean,
        rtlEnabled: Boolean,
        size: Object,
        theme: String,
        title: [Object, String],
        tooltip: Object,
        touchEnabled: Boolean,
        wheelEnabled: Boolean,
        zoomFactor: Number,
        zoomingEnabled: Boolean
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = vector_map_1.default;
        this.$_expectedChildren = {
            background: { isCollectionItem: false, optionName: "background" },
            controlBar: { isCollectionItem: false, optionName: "controlBar" },
            export: { isCollectionItem: false, optionName: "export" },
            layer: { isCollectionItem: true, optionName: "layers" },
            legend: { isCollectionItem: true, optionName: "legends" },
            loadingIndicator: { isCollectionItem: false, optionName: "loadingIndicator" },
            projection: { isCollectionItem: false, optionName: "projection" },
            size: { isCollectionItem: false, optionName: "size" },
            title: { isCollectionItem: false, optionName: "title" },
            tooltip: { isCollectionItem: false, optionName: "tooltip" },
            vectorMapTitle: { isCollectionItem: false, optionName: "title" }
        };
    }
});
exports.DxVectorMap = DxVectorMap;
var DxBackground = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        borderColor: String,
        color: String
    }
});
exports.DxBackground = DxBackground;
DxBackground.$_optionName = "background";
var DxBorder = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxBorder = DxBorder;
DxBorder.$_optionName = "border";
var DxControlBar = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        borderColor: String,
        color: String,
        enabled: Boolean,
        horizontalAlignment: String,
        margin: Number,
        opacity: Number,
        verticalAlignment: String
    }
});
exports.DxControlBar = DxControlBar;
DxControlBar.$_optionName = "controlBar";
var DxExport = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        backgroundColor: String,
        enabled: Boolean,
        fileName: String,
        formats: Array,
        margin: Number,
        printingEnabled: Boolean,
        proxyUrl: String,
        svgToCanvas: Function
    }
});
exports.DxExport = DxExport;
DxExport.$_optionName = "export";
var DxFont = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        color: String,
        family: String,
        opacity: Number,
        size: [Number, String],
        weight: Number
    }
});
exports.DxFont = DxFont;
DxFont.$_optionName = "font";
var DxFormat = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String
    }
});
exports.DxFormat = DxFormat;
DxFormat.$_optionName = "format";
var DxLabel = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        dataField: String,
        enabled: Boolean,
        font: Object
    }
});
exports.DxLabel = DxLabel;
DxLabel.$_optionName = "label";
DxLabel.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxLayer = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        borderColor: String,
        borderWidth: Number,
        color: String,
        colorGroupingField: String,
        colorGroups: Array,
        customize: Function,
        dataField: String,
        dataSource: [Array, Object, String],
        elementType: String,
        hoveredBorderColor: String,
        hoveredBorderWidth: Number,
        hoveredColor: String,
        hoverEnabled: Boolean,
        label: Object,
        maxSize: Number,
        minSize: Number,
        name: String,
        opacity: Number,
        palette: [Array, String],
        paletteSize: Number,
        selectedBorderColor: String,
        selectedBorderWidth: Number,
        selectedColor: String,
        selectionMode: String,
        size: Number,
        sizeGroupingField: String,
        sizeGroups: Array,
        type: String
    }
});
exports.DxLayer = DxLayer;
DxLayer.$_optionName = "layers";
DxLayer.$_isCollectionItem = true;
DxLayer.$_expectedChildren = {
    label: { isCollectionItem: false, optionName: "label" }
};
var DxLegend = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        backgroundColor: String,
        border: Object,
        columnCount: Number,
        columnItemSpacing: Number,
        customizeHint: Function,
        customizeItems: Function,
        customizeText: Function,
        font: Object,
        horizontalAlignment: String,
        itemsAlignment: String,
        itemTextPosition: String,
        margin: [Number, Object],
        markerColor: String,
        markerShape: String,
        markerSize: Number,
        markerTemplate: {},
        orientation: String,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        rowCount: Number,
        rowItemSpacing: Number,
        source: Object,
        title: [Object, String],
        verticalAlignment: String,
        visible: Boolean
    }
});
exports.DxLegend = DxLegend;
DxLegend.$_optionName = "legends";
DxLegend.$_isCollectionItem = true;
DxLegend.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    legendBorder: { isCollectionItem: false, optionName: "border" },
    legendTitle: { isCollectionItem: false, optionName: "title" },
    margin: { isCollectionItem: false, optionName: "margin" },
    source: { isCollectionItem: false, optionName: "source" },
    title: { isCollectionItem: false, optionName: "title" }
};
var DxLegendBorder = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxLegendBorder = DxLegendBorder;
DxLegendBorder.$_optionName = "border";
var DxLegendTitle = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: Object,
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        verticalAlignment: String
    }
});
exports.DxLegendTitle = DxLegendTitle;
DxLegendTitle.$_optionName = "title";
DxLegendTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    legendTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" },
    margin: { isCollectionItem: false, optionName: "margin" },
    subtitle: { isCollectionItem: false, optionName: "subtitle" }
};
var DxLegendTitleSubtitle = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        font: Object,
        offset: Number,
        text: String
    }
});
exports.DxLegendTitleSubtitle = DxLegendTitleSubtitle;
DxLegendTitleSubtitle.$_optionName = "subtitle";
DxLegendTitleSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxLoadingIndicator = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        backgroundColor: String,
        enabled: Boolean,
        font: Object,
        show: Boolean,
        text: String
    }
});
exports.DxLoadingIndicator = DxLoadingIndicator;
DxLoadingIndicator.$_optionName = "loadingIndicator";
DxLoadingIndicator.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxMargin = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        bottom: Number,
        left: Number,
        right: Number,
        top: Number
    }
});
exports.DxMargin = DxMargin;
DxMargin.$_optionName = "margin";
var DxProjection = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        aspectRatio: Number,
        from: Function,
        to: Function
    }
});
exports.DxProjection = DxProjection;
DxProjection.$_optionName = "projection";
var DxShadow = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        blur: Number,
        color: String,
        offsetX: Number,
        offsetY: Number,
        opacity: Number
    }
});
exports.DxShadow = DxShadow;
DxShadow.$_optionName = "shadow";
var DxSize = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        height: Number,
        width: Number
    }
});
exports.DxSize = DxSize;
DxSize.$_optionName = "size";
var DxSource = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        grouping: String,
        layer: String
    }
});
exports.DxSource = DxSource;
DxSource.$_optionName = "source";
var DxSubtitle = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        font: Object,
        offset: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
});
exports.DxSubtitle = DxSubtitle;
DxSubtitle.$_optionName = "subtitle";
var DxTitle = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: Object,
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        wordWrap: String
    }
});
exports.DxTitle = DxTitle;
DxTitle.$_optionName = "title";
var DxTooltip = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        arrowLength: Number,
        border: Object,
        color: String,
        container: {},
        contentTemplate: {},
        cornerRadius: Number,
        customizeTooltip: Function,
        enabled: Boolean,
        font: Object,
        format: [Object, Function, String],
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        shadow: Object,
        zIndex: Number
    }
});
exports.DxTooltip = DxTooltip;
DxTooltip.$_optionName = "tooltip";
DxTooltip.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" },
    shadow: { isCollectionItem: false, optionName: "shadow" },
    tooltipBorder: { isCollectionItem: false, optionName: "border" }
};
var DxTooltipBorder = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        color: String,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxTooltipBorder = DxTooltipBorder;
DxTooltipBorder.$_optionName = "border";
var DxVectorMapTitle = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: [Number, Object],
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        wordWrap: String
    }
});
exports.DxVectorMapTitle = DxVectorMapTitle;
DxVectorMapTitle.$_optionName = "title";
DxVectorMapTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    margin: { isCollectionItem: false, optionName: "margin" },
    subtitle: { isCollectionItem: false, optionName: "subtitle" },
    vectorMapTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" }
};
var DxVectorMapTitleSubtitle = Vue.extend({
    extends: configuration_component_1.DxConfiguration,
    props: {
        font: Object,
        offset: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
});
exports.DxVectorMapTitleSubtitle = DxVectorMapTitleSubtitle;
DxVectorMapTitleSubtitle.$_optionName = "subtitle";
DxVectorMapTitleSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
exports.default = DxVectorMap;
