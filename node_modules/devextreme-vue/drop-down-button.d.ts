/*!
 * devextreme-vue
 * Version: 20.1.6
 * Build date: Fri Jul 17 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import * as VueType from "vue";
import DropDownButton, { IOptions } from "devextreme/ui/drop_down_button";
declare type AccessibleOptions = Pick<IOptions, "accessKey" | "activeStateEnabled" | "dataSource" | "deferRendering" | "disabled" | "displayExpr" | "dropDownContentTemplate" | "dropDownOptions" | "elementAttr" | "focusStateEnabled" | "height" | "hint" | "hoverStateEnabled" | "icon" | "items" | "itemTemplate" | "keyExpr" | "noDataText" | "onButtonClick" | "onContentReady" | "onDisposing" | "onInitialized" | "onItemClick" | "onOptionChanged" | "onSelectionChanged" | "opened" | "rtlEnabled" | "selectedItem" | "selectedItemKey" | "showArrowIcon" | "splitButton" | "stylingMode" | "tabIndex" | "text" | "useSelectMode" | "visible" | "width" | "wrapItemText">;
interface DxDropDownButton extends AccessibleOptions {
    readonly instance?: DropDownButton;
}
declare const DxDropDownButton: VueType.VueConstructor<{
    instance: DropDownButton;
} & {
    accessKey: string;
    activeStateEnabled: boolean;
    dataSource: any;
    deferRendering: boolean;
    disabled: boolean;
    displayExpr: TimerHandler;
    dropDownContentTemplate: unknown;
    dropDownOptions: any;
    elementAttr: any;
    focusStateEnabled: boolean;
    height: string | number | Function;
    hint: string;
    hoverStateEnabled: boolean;
    icon: string;
    items: unknown[];
    itemTemplate: unknown;
    keyExpr: string;
    noDataText: string;
    onButtonClick: TimerHandler;
    onContentReady: Function;
    onDisposing: Function;
    onInitialized: Function;
    onItemClick: TimerHandler;
    onOptionChanged: Function;
    onSelectionChanged: TimerHandler;
    opened: boolean;
    rtlEnabled: boolean;
    selectedItem: any;
    selectedItemKey: string | number;
    showArrowIcon: boolean;
    splitButton: boolean;
    stylingMode: string;
    tabIndex: number;
    text: string;
    useSelectMode: boolean;
    visible: boolean;
    width: string | number | Function;
    wrapItemText: boolean;
} & VueType.default>;
declare const DxAnimation: any;
declare const DxAt: any;
declare const DxBoundaryOffset: any;
declare const DxCollision: any;
declare const DxDropDownOptions: any;
declare const DxHide: any;
declare const DxItem: any;
declare const DxMy: any;
declare const DxOffset: any;
declare const DxPosition: any;
declare const DxShow: any;
declare const DxToolbarItem: any;
export default DxDropDownButton;
export { DxDropDownButton, DxAnimation, DxAt, DxBoundaryOffset, DxCollision, DxDropDownOptions, DxHide, DxItem, DxMy, DxOffset, DxPosition, DxShow, DxToolbarItem };
